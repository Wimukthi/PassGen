Imports System.ComponentModel
Imports System.IO
' Removed System.Security.Cryptography import as it's now encapsulated in services
Imports System.Tuple ' Required for passing multiple results from BackgroundWorker

Public Class FrmMain ' IDE1006: Renamed class

    ' --- Service Instances ---
    Private _errorLogger As ErrorLogger
    Private _passwordGenerator As PasswordGenerator
    Private _entropyCalculator As EntropyCalculator
    Private _hashingService As HashingService
    Private _passwordSaver As PasswordSaver

    ' --- State Variables ---
    Private _currentGeneratedPassword As String ' Holds the password generated by bwgen for use by threadEntropy
    Public Plength As Integer = 35 ' Stores the length of the password for the current generation cycle
    Public NumberOfKeysRemaining As Integer = 1 ' Stores the *remaining* count of keys to be generated in the current batch
    Public TotalKeysInBatch As Integer = 1 ' Stores the *total* number of keys requested for the batch
    Public WindowTitle As String ' Stores the base window title
    Private _isGeneratingBatch As Boolean = False ' Flag to track if a batch generation is in progress

    Private Sub FrmMain_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load ' IDE1006: Renamed method
        Try
            ' --- Initialize Services ---
            _errorLogger = New ErrorLogger() ' Initialize logger first
            _passwordGenerator = New PasswordGenerator(_errorLogger)
            _entropyCalculator = New EntropyCalculator(_errorLogger)
            _hashingService = New HashingService(_errorLogger)
            _passwordSaver = New PasswordSaver(_errorLogger)

            ' --- Initialize UI ---
            WindowTitle = "Grey Element Software - PassGen v" & My.Application.Info.Version.ToString ' Corrected &
            Me.Text = WindowTitle & " - Idle" ' Corrected & ' Set the Default window title
            txtMaxLength.Value = Plength ' Set default length in UI
            txtPassAmount.Value = TotalKeysInBatch ' Set default amount in UI

        Catch ex As Exception
            ' Use the initialized logger if available, otherwise show a basic message box
            If _errorLogger IsNot Nothing Then ' IDE0029: Null check can be simplified (already is simple)
                _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error during Form Load")
            Else
                MessageBox.Show("A critical error occurred during application startup: " & ex.Message, "Startup Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
            End If
            ' Consider closing the application here if startup fails critically
            ' Application.Exit()
        End Try
    End Sub

    Private Sub BtnGenerate_Click(sender As System.Object, e As System.EventArgs) Handles btnGenerate.Click ' IDE1006: Renamed method
        ' Prevent overlapping generation attempts
        If _isGeneratingBatch OrElse bwgen.IsBusy OrElse threadEntropy.IsBusy Then
            MessageBox.Show("Password generation is already in progress. Please wait.", "Busy", MessageBoxButtons.OK, MessageBoxIcon.Information)
            Return
        End If

        Try
            ' --- Validate Inputs ---
            If txtMaxLength.Value <= 0 Then
                MessageBox.Show("Password length must be greater than 0.", "Invalid Length", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                Return
            End If
            If txtPassAmount.Value <= 0 Then
                MessageBox.Show("Number of passwords must be greater than 0.", "Invalid Amount", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                Return
            End If

            ' --- Start Batch Generation ---
            _isGeneratingBatch = True
            Plength = CInt(txtMaxLength.Value) ' Get current length from UI for this batch
            TotalKeysInBatch = CInt(txtPassAmount.Value) ' Get total count for this batch
            NumberOfKeysRemaining = TotalKeysInBatch ' Initialize remaining count

            ' --- Configure Progress Bars ---
            progGen.Minimum = 0
            progGen.Maximum = TotalKeysInBatch
            progGen.Value = 0
            progEntropy.Minimum = 0
            progEntropy.Maximum = 128 ' Default max
            progEntropy.Value = 0

            ' --- Clear UI elements *once* at the start of the batch ---
            lstvKeys.Items.Clear()
            txtoutput.Clear()
            txtMD5.Text = ""
            txtSHA256.Text = ""
            txtSHA512.Text = ""
            lblEntropy.Text = "Password Entropy :"
            _currentGeneratedPassword = "" ' Clear any previous password

            ' --- Start the first asynchronous password generation ---
            Me.Text = WindowTitle & " - Starting Batch (1/" & TotalKeysInBatch & ")" ' Corrected & (multiple)
            bwgen.RunWorkerAsync() ' Start the first cycle

        Catch ex As Exception
            _isGeneratingBatch = False ' Reset flag on error
            _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in btnGenerate_Click")
            MessageBox.Show("An error occurred starting the generation: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
            Me.Text = WindowTitle & " - Error" ' Corrected &
        End Try
    End Sub

    ' --- Background Worker: Password Generation ---

    Private Sub Bwgen_DoWork(sender As System.Object, e As System.ComponentModel.DoWorkEventArgs) Handles bwgen.DoWork ' IDE1006: Renamed method
        ' This worker now focuses *only* on generating a single password string.
        Dim generatedPassword As String = "" ' IDE0059: Assignment is necessary here before Try block
        Try
            ' 1. Build Character Set using the service
            Dim characterSet As String = _passwordGenerator.BuildCharacterSet(
                chkUpperCase.Checked,
                chkLowerCase.Checked,
                chkNumbers.Checked,
                chkSpecialCharacters.Checked,
                chkSpace.Checked,
                chkCustomChars.Checked,
                txtCustomChars.Text
            )

            ' 2. Generate Password using the service
            If Not String.IsNullOrEmpty(characterSet) Then
                generatedPassword = _passwordGenerator.GeneratePassword(characterSet, Plength)
            Else
                generatedPassword = ""
            End If

            ' 3. Pass the result back
            e.Result = generatedPassword

        Catch ex As Exception
            _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in bwgen_DoWork")
            e.Result = ex ' Pass the exception object itself
        End Try
    End Sub

    Private Sub Bwgen_RunWorkerCompleted(sender As System.Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bwgen.RunWorkerCompleted ' IDE1006: Renamed method
        Try
            ' Check for errors passed from DoWork
            If e.Result IsNot Nothing AndAlso TypeOf e.Result Is Exception Then ' IDE0029: Null check can be simplified (already is simple)
                Dim ex As Exception = CType(e.Result, Exception)
                _isGeneratingBatch = False ' Stop batch on error
                MessageBox.Show("An error occurred during password generation: " & ex.Message, "Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
                Me.Text = WindowTitle & " - Error" ' Corrected &
                Return
            End If

            ' Check for cancellation
            If e.Cancelled Then
                _isGeneratingBatch = False
                Me.Text = WindowTitle & " - Cancelled" ' Corrected &
                MessageBox.Show("Password generation was cancelled.", "Cancelled", MessageBoxButtons.OK, MessageBoxIcon.Information)
                Return
            End If

            ' Get the generated password string
            _currentGeneratedPassword = CStr(If(e.Result IsNot Nothing, e.Result, ""))

            If String.IsNullOrEmpty(_currentGeneratedPassword) Then
                 _isGeneratingBatch = False
                 MessageBox.Show("Password generation failed (likely no character types selected). Batch stopped.", "Generation Failed", MessageBoxButtons.OK, MessageBoxIcon.Warning)
                 Me.Text = WindowTitle & " - Failed" ' Corrected &
                 Return
            End If

            ' --- Generation successful, start entropy calculation ---
            Me.Text = WindowTitle & " - Calculating Entropy..." ' Corrected &
            lblEntropy.Text = "Calculating Entropy, Please Wait.."
            threadEntropy.RunWorkerAsync(_currentGeneratedPassword)

        Catch ex As Exception
            _isGeneratingBatch = False ' Reset flag on error
            _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in bwgen_RunWorkerCompleted")
            MessageBox.Show("An error occurred after password generation: " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
            Me.Text = WindowTitle & " - Error" ' Corrected &
        End Try
    End Sub

    Private Sub Bwgen_ProgressChanged(sender As System.Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles bwgen.ProgressChanged ' IDE1006: Renamed method
        ' No longer used.
    End Sub


    ' --- Background Worker: Entropy Calculation &amp; UI Update ---

    Private Sub ThreadEntropy_DoWork(sender As System.Object, e As System.ComponentModel.DoWorkEventArgs) Handles threadEntropy.DoWork ' IDE1006: Renamed method
        Dim uniqueChars As Integer = 0
        Dim calculatedEntropy As Double = 0.0
        Dim passwordToAnalyze As String = ""

        Try
            If e.Argument IsNot Nothing AndAlso TypeOf e.Argument Is String Then
                passwordToAnalyze = CStr(e.Argument)
            End If

            If Not String.IsNullOrEmpty(passwordToAnalyze) Then
                uniqueChars = _entropyCalculator.CountUniqueCharacters(passwordToAnalyze)
                calculatedEntropy = _entropyCalculator.CalculateEntropy(Plength, uniqueChars)
            End If

            e.Result = Tuple.Create(uniqueChars, calculatedEntropy)

        Catch ex As Exception
            _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in threadEntropy_DoWork")
             e.Result = ex
        End Try
    End Sub

    Private Sub ThreadEntropy_ProgressChanged(sender As System.Object, e As System.ComponentModel.ProgressChangedEventArgs) Handles threadEntropy.ProgressChanged ' IDE1006: Renamed method
        ' No longer used.
    End Sub

    Private Sub ThreadEntropy_RunWorkerCompleted(sender As System.Object, e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles threadEntropy.RunWorkerCompleted ' IDE1006: Renamed method
        Try
            ' Check for errors passed from DoWork
            If e.Result IsNot Nothing AndAlso TypeOf e.Result Is Exception Then
                Dim ex As Exception = CType(e.Result, Exception)
                _isGeneratingBatch = False ' Stop batch on error
                MessageBox.Show("An error occurred during entropy calculation: " & ex.Message, "Entropy Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
                Me.Text = WindowTitle & " - Error" ' Corrected &
                Return
            End If

            ' Check for cancellation
            If e.Cancelled Then
                _isGeneratingBatch = False
                Me.Text = WindowTitle & " - Cancelled" ' Corrected &
                Return
            End If

            ' --- Process successful entropy calculation ---
            Dim entropyResult As Tuple(Of Integer, Double) = Nothing
            If e.Result IsNot Nothing AndAlso TypeOf e.Result Is Tuple(Of Integer, Double) Then
                 entropyResult = CType(e.Result, Tuple(Of Integer, Double))
            Else
                 _errorLogger.WriteToErrorLog("Invalid result type received from threadEntropy_DoWork.", e.Result?.GetType().ToString(), "Internal Error")
                 _isGeneratingBatch = False
                 Me.Text = WindowTitle & " - Error" ' Corrected &
                 MessageBox.Show("An internal error occurred processing password data.", "Internal Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                 Return
            End If

            Dim uniqueChars As Integer = entropyResult.Item1
            Dim pwentropy As Double = entropyResult.Item2

            ' --- Update UI ---
            txtoutput.Text = _currentGeneratedPassword
            lblEntropy.Text = "Password Entropy : " & Math.Floor(pwentropy).ToString() & " bits" ' Corrected & (multiple)
            Dim entropyProgressValue As Integer = CInt(Math.Max(progEntropy.Minimum, Math.Min(progEntropy.Maximum, Math.Floor(pwentropy))))
            progEntropy.Value = entropyProgressValue

            ' Calculate Hashes
            Dim md5Hash As String = _hashingService.GenerateMD5Hash(_currentGeneratedPassword)
            Dim sha256Hash As String = _hashingService.GenerateSHA256Hash(_currentGeneratedPassword)
            Dim sha512Hash As String = _hashingService.GenerateSHA512Hash(_currentGeneratedPassword)

            txtMD5.Text = md5Hash
            txtSHA256.Text = sha256Hash
            txtSHA512.Text = sha512Hash

            ' --- Add to ListView ---
            Dim newItem As New ListViewItem((lstvKeys.Items.Count + 1).ToString())
            newItem.SubItems.Add(_currentGeneratedPassword)
            newItem.SubItems.Add(Math.Floor(pwentropy).ToString() & " bits") ' Corrected &
            newItem.SubItems.Add(Plength.ToString())
            newItem.SubItems.Add(md5Hash)
            newItem.SubItems.Add(sha256Hash)
            newItem.SubItems.Add(sha512Hash)
            lstvKeys.Items.Add(newItem)
            newItem.EnsureVisible()

            ' --- Update Batch Progress ---
            NumberOfKeysRemaining -= 1
            progGen.Value = TotalKeysInBatch - NumberOfKeysRemaining

            ' --- Prepare for next iteration or finish ---
            _currentGeneratedPassword = ""

            If NumberOfKeysRemaining > 0 Then
                Dim currentKeyNum As Integer = TotalKeysInBatch - NumberOfKeysRemaining + 1
                Me.Text = WindowTitle & " - Generating key " & currentKeyNum & "/" & TotalKeysInBatch ' Corrected & (multiple)
                bwgen.RunWorkerAsync()
            Else
                _isGeneratingBatch = False
                Me.Text = WindowTitle & " - Batch Complete" ' Corrected &
                MessageBox.Show("Finished generating all " & TotalKeysInBatch & " passwords.", "Complete", MessageBoxButtons.OK, MessageBoxIcon.Information) ' Corrected &
                progGen.Value = progGen.Maximum
            End If

        Catch ex As Exception
            _isGeneratingBatch = False
            _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in threadEntropy_RunWorkerCompleted")
            MessageBox.Show("An error occurred processing the generated password: " & ex.Message, "Processing Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
            Me.Text = WindowTitle & " - Error" ' Corrected &
        End Try
    End Sub


    ' --- UI Event Handlers ---

    Private Sub BtnSave_Click(sender As System.Object, e As System.EventArgs) Handles btnSave.Click ' IDE1006: Renamed method
        If lstvKeys.Items.Count = 0 Then
            MessageBox.Show("There are no generated passwords in the list to save.", "Nothing to Save", MessageBoxButtons.OK, MessageBoxIcon.Information)
            Return
        End If

        ' IDE0017: Object initialization can be simplified
        Using saveFileDialog As New SaveFileDialog With {
            .Filter = "Text Files(*.txt)|*.txt",
            .Title = "Save Generated Passwords and Hashes",
            .FileName = "GeneratedPasswords.txt" ' Suggest a default filename
        }
            If saveFileDialog.ShowDialog() = DialogResult.OK Then
                Try
                    Dim success As Boolean = _passwordSaver.SavePasswordsToFile(saveFileDialog.FileName, lstvKeys.Items)
                    If success Then
                        MessageBox.Show("Passwords saved successfully to " & saveFileDialog.FileName, "Save Successful", MessageBoxButtons.OK, MessageBoxIcon.Information) ' Corrected &
                    Else
                        MessageBox.Show("An error occurred while saving the file. Please check the error log.", "Save Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                    End If
                Catch ex As Exception
                     _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in btnSave_Click")
                     MessageBox.Show("An unexpected error occurred during saving: " & ex.Message, "Save Error", MessageBoxButtons.OK, MessageBoxIcon.Error) ' Corrected &
                End Try
            End If
        End Using ' Dispose the dialog
    End Sub

    Private Sub ChkCustomChars_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkCustomChars.CheckedChanged ' IDE1006: Renamed method
        txtCustomChars.Enabled = chkCustomChars.Checked
    End Sub

    Private Sub ProgEntropy_Click(sender As System.Object, e As System.EventArgs) Handles progEntropy.Click ' IDE1006: Renamed method
        ' No action needed
    End Sub

    Private Sub Txtoutput_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtoutput.TextChanged ' IDE1006: Renamed method
        ' No action needed
    End Sub

    Private Sub BtnAbout_Click(sender As System.Object, e As System.EventArgs) Handles btnAbout.Click ' IDE1006: Renamed method
        Using aboutForm As New FrmAbout() ' Assuming FrmAbout is the class name
             aboutForm.ShowDialog(Me)
        End Using
    End Sub

    Private Sub BtnCopyMD5_Click(sender As System.Object, e As System.EventArgs) Handles btnCopyMD5.Click ' IDE1006: Renamed method
        If Not String.IsNullOrEmpty(txtMD5.Text) Then
            Try
                Clipboard.SetText(txtMD5.Text)
            Catch ex As Exception
                 _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error copying MD5 to clipboard")
                 MessageBox.Show("Could not copy text to clipboard: " & ex.Message, "Clipboard Error", MessageBoxButtons.OK, MessageBoxIcon.Warning) ' Corrected &
            End Try
        End If
    End Sub

    Private Sub BtnCopySHA256_Click(sender As System.Object, e As System.EventArgs) Handles btnCopySHA256.Click ' IDE1006: Renamed method
         If Not String.IsNullOrEmpty(txtSHA256.Text) Then
            Try
                Clipboard.SetText(txtSHA256.Text)
            Catch ex As Exception
                 _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error copying SHA256 to clipboard")
                 MessageBox.Show("Could not copy text to clipboard: " & ex.Message, "Clipboard Error", MessageBoxButtons.OK, MessageBoxIcon.Warning) ' Corrected &
            End Try
        End If
    End Sub

    Private Sub BtnCopySHA512_Click(sender As System.Object, e As System.EventArgs) Handles btnCopySHA512.Click ' IDE1006: Renamed method
         If Not String.IsNullOrEmpty(txtSHA512.Text) Then
            Try
                Clipboard.SetText(txtSHA512.Text)
            Catch ex As Exception
                 _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error copying SHA512 to clipboard")
                 MessageBox.Show("Could not copy text to clipboard: " & ex.Message, "Clipboard Error", MessageBoxButtons.OK, MessageBoxIcon.Warning) ' Corrected &
            End Try
        End If
    End Sub

    Private Sub TxtPassAmount_ValueChanged(sender As Object, e As EventArgs) Handles txtPassAmount.ValueChanged
        ' No action needed here
    End Sub

    Private Sub TxtMaxLength_ValueChanged(sender As Object, e As EventArgs) Handles txtMaxLength.ValueChanged
        ' No action needed here
    End Sub

    Private Sub LstvKeys_SelectedIndexChanged(sender As Object, e As EventArgs) Handles lstvKeys.SelectedIndexChanged ' IDE1006: Renamed method
        Try
            If lstvKeys.SelectedItems.Count > 0 Then
                Dim selectedItem As ListViewItem = lstvKeys.SelectedItems(0)

                If selectedItem.SubItems.Count >= 7 Then
                    ' Update TextBoxes
                    txtoutput.Text = selectedItem.SubItems(1).Text
                    txtMD5.Text = selectedItem.SubItems(4).Text
                    txtSHA256.Text = selectedItem.SubItems(5).Text
                    txtSHA512.Text = selectedItem.SubItems(6).Text

                    ' Update Entropy Display
                    Dim entropyText As String = selectedItem.SubItems(2).Text
                    lblEntropy.Text = "Password Entropy : " & entropyText ' Corrected &
                    Dim entropyValue As Integer = 0
                    Dim parts() As String = entropyText.Split(" ")
                    If parts.Length > 0 AndAlso Integer.TryParse(parts(0), entropyValue) Then
                        progEntropy.Value = Math.Max(progEntropy.Minimum, Math.Min(progEntropy.Maximum, entropyValue))
                    Else
                        progEntropy.Value = progEntropy.Minimum
                    End If
                Else
                     _errorLogger.WriteToErrorLog("Selected ListViewItem has insufficient SubItems.", $"Item Index: {selectedItem.Index}, SubItem Count: {selectedItem.SubItems.Count}", "UI Warning")
                End If
            End If
        Catch ex As Exception
            _errorLogger.WriteToErrorLog(ex.Message, ex.StackTrace, "Error in lstvKeys_SelectedIndexChanged")
        End Try
    End Sub

End Class
